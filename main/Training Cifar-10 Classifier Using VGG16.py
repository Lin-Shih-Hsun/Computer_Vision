# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hw1_5.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import torch
import torchvision
import numpy as np
import random
import matplotlib.pyplot as plt
import torch.nn as nn
import torch.nn.functional as F
from tqdm import tqdm
from torch import optim
from torchsummary import summary
from torchvision import models
from torchvision.datasets import CIFAR10
from torchvision.transforms import ToTensor
from torchvision.utils import make_grid
from torch.autograd import Variable
from torch.utils.data.dataloader import DataLoader
from torch.utils.data import dataset, random_split

from PyQt5 import QtCore, QtGui, QtWidgets

train_dataset = CIFAR10(root='data/', download=True, transform=ToTensor())
train_datasetloader=torch.utils.data.DataLoader(train_dataset,batch_size=32,shuffle=True,num_workers=0)
test_dataset = CIFAR10(root='data/', train=False, transform=ToTensor())
test_datasetloader=torch.utils.data.DataLoader(test_dataset,batch_size=16,shuffle=True,num_workers=0)
classes = train_dataset.classes

# hyperparameters
model = models.vgg16()
batch_size = 256
learning_rate = 0.001
num_epoches = 10
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr = learning_rate)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(355, 742)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 0, 201, 51))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.Show_Train_Image = QtWidgets.QPushButton(self.centralwidget)
        self.Show_Train_Image.setGeometry(QtCore.QRect(40, 70, 251, 91))
        self.Show_Train_Image.setObjectName("Show_Train_Image")
        self.Show_Hyperparameter = QtWidgets.QPushButton(self.centralwidget)
        self.Show_Hyperparameter.setGeometry(QtCore.QRect(40, 170, 251, 91))
        self.Show_Hyperparameter.setObjectName("Show_Hyperparameter")
        self.Show_Model_Shortcut = QtWidgets.QPushButton(self.centralwidget)
        self.Show_Model_Shortcut.setGeometry(QtCore.QRect(40, 270, 251, 91))
        self.Show_Model_Shortcut.setObjectName("Show_Model_Shortcut")
        self.Show_Accuracy = QtWidgets.QPushButton(self.centralwidget)
        self.Show_Accuracy.setGeometry(QtCore.QRect(40, 370, 251, 91))
        self.Show_Accuracy.setObjectName("Show_Accuracy")
        self.Test = QtWidgets.QPushButton(self.centralwidget)
        self.Test.setGeometry(QtCore.QRect(40, 570, 251, 91))
        self.Test.setObjectName("Test")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(50, 470, 241, 81))
        self.textEdit.setObjectName("textEdit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 355, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.Show_Train_Image.clicked.connect(lambda:self.hw1_5_1(train_dataset))
        self.Show_Hyperparameter.clicked.connect(lambda:self.hw1_5_2(batch_size, learning_rate, optimizer))
        self.Show_Model_Shortcut.clicked.connect(lambda:self.hw1_5_3(model))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "5. VGG16 TEST"))
        self.Show_Train_Image.setText(_translate("MainWindow", "5.1 Show Train Image"))
        self.Show_Hyperparameter.setText(_translate("MainWindow", "5.2 Show Hyperparameter"))
        self.Show_Model_Shortcut.setText(_translate("MainWindow", "5.3 Show_Model_Shortcut"))
        self.Show_Accuracy.setText(_translate("MainWindow", "5.4 Show_Accuracy"))
        self.Test.setText(_translate("MainWindow", "5.5 Test"))
    
    def hw1_5_1(self,dataset):
        rand = random.randint(1,len(dataset))
        x=0
        for i in range(9):
            rand = random.randint(1,len(dataset))
            images, labels = dataset[rand]
            plt.subplot(3,3,x+1)
            plt.tight_layout()
            images = images.numpy().transpose(1, 2, 0)  # 把channel那一维放到最后
            plt.title(str(classes[labels]))
            plt.imshow(images)
            plt.xticks([])
            plt.yticks([])
            x+=1
            if x==9:
                break
        plt.show()


    def hw1_5_2(self,batch_size, learning_rate, optimizer):
        print("hyperparameters : ")
        print("batch size : " + f"{batch_size}")
        print("learning rate : " + f"{learning_rate}")
        print("optimizer : " + f"{optimizer}")

    def hw1_5_3(self,model):
        print(summary(model, (3, 32, 32)))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
