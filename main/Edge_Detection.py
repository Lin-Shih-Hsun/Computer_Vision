# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hw1_3.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import cv2
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets

img = cv2.imread('../Dataset_OpenCvDl_Hw1/Q3_Image/House.jpg')

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(355, 543)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 0, 201, 51))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.Gaussian_Blur = QtWidgets.QPushButton(self.centralwidget)
        self.Gaussian_Blur.setGeometry(QtCore.QRect(40, 70, 251, 91))
        self.Gaussian_Blur.setObjectName("Gaussian_Blur")
        self.Sobel_X = QtWidgets.QPushButton(self.centralwidget)
        self.Sobel_X.setGeometry(QtCore.QRect(40, 170, 251, 91))
        self.Sobel_X.setObjectName("Sobel_X")
        self.Sobel_Y = QtWidgets.QPushButton(self.centralwidget)
        self.Sobel_Y.setGeometry(QtCore.QRect(40, 270, 251, 91))
        self.Sobel_Y.setObjectName("Sobel_Y")
        self.Magnitude = QtWidgets.QPushButton(self.centralwidget)
        self.Magnitude.setGeometry(QtCore.QRect(40, 370, 251, 91))
        self.Magnitude.setObjectName("Magnitude")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 355, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.Gaussian_Blur.clicked.connect(lambda:self.hw1_3_1(img))
        self.Sobel_X.clicked.connect(lambda:self.hw1_3_2(img))
        self.Sobel_Y.clicked.connect(lambda:self.hw1_3_3(img))
        self.Magnitude.clicked.connect(lambda:self.hw1_3_4(img))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "3. Edge Detection"))
        self.Gaussian_Blur.setText(_translate("MainWindow", "3.1 Gaussian Blur"))
        self.Sobel_X.setText(_translate("MainWindow", "3.2 Sobel X"))
        self.Sobel_Y.setText(_translate("MainWindow", "3.3 Sobel Y"))
        self.Magnitude.setText(_translate("MainWindow", "3.4 Magnitude"))

    # show image
    def show_image(self, inputimgname, inputimg):
        cv2.imshow(inputimgname, inputimg)
        cv2.waitKey(0)

    # hw1_3.1
    def rgb2gray(self,img):
        height, width = img.shape[:2]
        grayimg = np.zeros((height, width), np.uint8)
        grayimg.fill(255)
        for i in range(height):
            for j in range(width):
                grayimg[i][j] = int(img[i][j][0]*0.2126 + img[i][j][1]*0.7152 + img[i][j][2]*0.0722)
        return grayimg

    def gaussianfilter(self,img):
        (height, width) = img.shape[:2]
        ker = np.array([[0.045, 0.122, 0.045],[0.122, 0.322, 0.122],[0.045, 0.122,0.045]])
        gauimg = np.zeros((height, width),np.uint8)
        for i in range(1,height-1):
            for j in range(1,width-1):
                imgentry = img[i-1:i+2, j-1:j+2]
                val = np.sum(imgentry*ker)
                gauimg[i][j] = val
        return gauimg

    # hw1_3.2
    def sobelx(self,img):
        grayimg = self.rgb2gray(img)
        gauimg = self.gaussianfilter(grayimg)
        (height, width) = gauimg.shape[:2]
        Gx = np.array([[-1,0,1],[-2,0,2],[-1,0,1]])
        sobx = np.zeros((height,width), np.uint8)
        for i in range(2,height-2):
            for j in range(2,width-2):
                gauimgentry = gauimg[i-1:i+2, j-1:j+2]
                val = np.sum(gauimgentry*Gx)
                sobx[i][j] = abs(val)
        return sobx

    # hw1_3.3
    def sobely(self,img):
        grayimg = self.rgb2gray(img)
        gauimg = self.gaussianfilter(grayimg)
        (height, width) = gauimg.shape[:2]
        Gy = np.array([[1,2,1],[0,0,0],[-1,-2,-1]])
        soby = np.zeros((height,width), np.uint8)
        for i in range(2,height-2):
            for j in range(2,width-2):
                gauimgentry = gauimg[i-1:i+2, j-1:j+2]
                val = np.sum(gauimgentry*Gy)
                soby[i][j] = abs(val)
        return soby
    
    # hw1_3.4
    def magnitude(self,img):
        sobx = self.sobelx(img)
        soby = self.sobely(img)
        magni = sobx+soby
        return magni

    # Main
    def hw1_3_1(self, img):
        grayimg = self.rgb2gray(img)
        gauimg = self.gaussianfilter(grayimg)
        self.show_image('Gaussian Blur',gauimg)

    def hw1_3_2(self, img):
        sobx = self.sobelx(img)
        self.show_image('Sobel X',sobx)

    def hw1_3_3(self, img):
        soby = self.sobely(img)
        self.show_image('Sobel Y',soby)

    def hw1_3_4(self, img):
        magni = self.magnitude(img)
        self.show_image('Magnitude', magni)


    


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
